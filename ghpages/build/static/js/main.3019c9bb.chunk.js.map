{"version":3,"sources":["component-lib/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["__makeTemplateObject","cooked","raw","Object","defineProperty","value","templateObject_1","templateObject_2","templateObject_3","falldown","keyframes","window","innerHeight","FallDown","styled","div","props","speed","css","defaultEmojis","getRandomInt","min","max","Math","floor","random","Rain","_a","_b","emojis","_c","useState","rerollPos","position","setPosition","fallingDownTime","useRef","document","body","getBoundingClientRect","width","useEffect","setInterval","current","createElement","style","left","top","index","length","getOneOfEmojis","App","React","rainNumber","setRainNumber","className","disabled","onClick","margin","Array","fill","map","el","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":";0PAmBA,SAASA,EAAqBC,EAAQC,GAElC,OADIC,OAAOC,eAAkBD,OAAOC,eAAeH,EAAQ,MAAO,CAAEI,MAAOH,IAAiBD,EAAOC,IAAMA,EAClGD,EAGX,IAGIK,EAAkBC,EAAkBC,EAHpCC,EAAWC,YAAUJ,IAAqBA,EAAmBN,EAAqB,CAAC,qLAAsL,mGAAoG,8BAA+B,CAAC,qLAAsL,mGAAoG,gCAAiCW,OAAOC,YAAc,EAAGD,OAAOC,aAEvuBC,EAAWC,IAAOC,IAAIP,IAAqBA,EAAmBR,EAAqB,CAAC,OAAQ,oEAAqE,CAAC,OAAQ,uEAAuE,SAAUgB,GAAS,OAD9OC,EAC+PD,EAAMC,MADrPC,YAAIX,IAAqBA,EAAmBP,EAAqB,CAAC,kBAAmB,4BAA6B,qFAAsF,CAAC,kBAAmB,4BAA6B,uFAAwFS,EAAUQ,EAAQ,KAA7X,IAAUA,KAItBE,EAAgB,CAAC,eAAM,eAAM,eAAM,gBACnCC,EAAe,SAAUC,EAAKC,GAE9B,YADY,IAARD,IAAkBA,EAAM,GACrBE,KAAKC,MAAMD,KAAKE,SAAWH,GAAOD,GAEzCK,EAAO,SAAUC,GACjB,IAAIC,EAAKD,EAAGE,OAAQA,OAAgB,IAAPD,EAAgBT,EAAgBS,EACzDE,EAAKC,mBAASC,KAAcC,EAAWH,EAAG,GAAII,EAAcJ,EAAG,GAC/DK,EAAkBC,iBAAwB,EAAhBb,KAAKE,SAAgB,GAUnD,SAASO,IAGL,MAAO,CAFCZ,EAAa,GAAIiB,SAASC,KAAKC,wBAAwBC,MAAQ,IAC/DpB,GAAc,IAAK,MAG/B,OAVAqB,qBAAU,WACN9B,OAAO+B,aAAY,WACfR,EAAYF,OACa,IAA1BG,EAAgBQ,WACpB,IAMKC,wBAAc/B,EAAU,CAAEI,MAAOkB,EAAgBQ,QAASE,MAAO,CACjEC,KAAMb,EAAS,GACfc,IAAKd,EAAS,KAhBD,WACjB,IAAIe,EAAQ5B,EAAa,EAAGS,EAAOoB,QACnC,OAAOpB,EAAOmB,GAeTE,KCbEC,EApCH,WAAO,IAAD,EACoBC,IAAMrB,SAHf,KAEX,mBACTsB,EADS,KACGC,EADH,KAehB,OACE,yBAAKC,UAAU,OACb,6BACE,4BAAQC,SAAUH,GApBG,IAoBiCI,QAf5D,WACMJ,GANqB,KAOvBC,EAAcD,EAAa,IAasDR,MAAO,CAAEa,OAAQ,UAAhG,oBAGA,4BAAQF,SAAUH,GAAc,EAAGI,QAZzC,WACMJ,EAAa,GACfC,EAAcD,EAAa,IAUsCR,MAAO,CAAEa,OAAQ,UAAhF,wBAIF,6BACA,0DAC6BL,GAE5B,IAAIM,MAAMN,GAAYO,KAAK,IAAIC,KAAI,SAACC,EAAId,GAAL,OAClC,kBAAC,EAAD,CAAMe,IAAKf,SCxBCgB,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASiC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3019c9bb.chunk.js","sourcesContent":["/* eslint-disable */\nimport { useState, useRef, useEffect, createElement } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n}\n\nvar falldown = keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  0%{\\n    opacity: 0;\\n    transform: translateY(0) rotate(0);\\n  }\\n  5%{\\n    transform: translateY(5px) rotate(0);\\n    opacity: 1;\\n  }\\n  95%{\\n    transform: translateY(\", \"px) rotate(360deg);\\n    opacity: 1;\\n  }\\n  100%{\\n    opacity: 0;\\n    transform : translateY(\", \"px) rotate(360deg);\\n  }\\n\"], [\"\\n  0%{\\n    opacity: 0;\\n    transform: translateY(0) rotate(0);\\n  }\\n  5%{\\n    transform: translateY(5px) rotate(0);\\n    opacity: 1;\\n  }\\n  95%{\\n    transform: translateY(\", \"px) rotate(360deg);\\n    opacity: 1;\\n  }\\n  100%{\\n    opacity: 0;\\n    transform : translateY(\", \"px) rotate(360deg);\\n  }\\n\"])), window.innerHeight - 5, window.innerHeight);\r\nvar animation = function (speed) { return css(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n  animation: \", \";\\n  animation-duration: \", \";\\n  animation-iteration-count: infinite;\\n  animation-timing-function: linear;\\n\"], [\"\\n  animation: \", \";\\n  animation-duration: \", \";\\n  animation-iteration-count: infinite;\\n  animation-timing-function: linear;\\n\"])), falldown, speed + \"s\"); };\r\nvar FallDown = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n  \", \";\\n  position: absolute;\\n  user-select: none;\\n  z-index: 10;\\n\"], [\"\\n  \", \";\\n  position: absolute;\\n  user-select: none;\\n  z-index: 10;\\n\"])), function (props) { return animation(props.speed); });\r\nvar templateObject_1, templateObject_2, templateObject_3;\n\nvar defaultEmojis = [\"ðŸ¤‘\", \"ðŸ’¸\", \"ðŸ’µ\", \"ðŸ’²\"];\r\nvar getRandomInt = function (min, max) {\r\n    if (min === void 0) { min = 0; }\r\n    return Math.floor(Math.random() * max) + min;\r\n};\r\nvar Rain = function (_a) {\r\n    var _b = _a.emojis, emojis = _b === void 0 ? defaultEmojis : _b;\r\n    var _c = useState(rerollPos()), position = _c[0], setPosition = _c[1];\r\n    var fallingDownTime = useRef((Math.random() * 6) + 2);\r\n    var getOneOfEmojis = function () {\r\n        var index = getRandomInt(0, emojis.length);\r\n        return emojis[index];\r\n    };\r\n    useEffect(function () {\r\n        window.setInterval(function () {\r\n            setPosition(rerollPos());\r\n        }, fallingDownTime.current * 1000);\r\n    }, []);\r\n    function rerollPos() {\r\n        var x = getRandomInt(15, document.body.getBoundingClientRect().width - 15);\r\n        var y = getRandomInt(-10, -150);\r\n        return [x, y];\r\n    }\r\n    return (createElement(FallDown, { speed: fallingDownTime.current, style: {\r\n            left: position[0],\r\n            top: position[1],\r\n        } }, getOneOfEmojis()));\r\n};\n\nexport { Rain };\n","import React from 'react';\nimport './App.css';\nimport { Rain } from './component-lib';\n\nconst maxRainElementsCount = 150;\n\nconst App = () => {\n  const [rainNumber, setRainNumber] = React.useState(maxRainElementsCount);\n\n  function addRainElement() {\n    if (rainNumber <= maxRainElementsCount) {\n      setRainNumber(rainNumber + 1);\n    }\n  }\n\n  function removeRainElement() {\n    if (rainNumber > 1) {\n      setRainNumber(rainNumber - 1);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button disabled={rainNumber >= maxRainElementsCount} onClick={addRainElement} style={{ margin: '0 8px' }}>\n          Add rain element\n        </button>\n        <button disabled={rainNumber <= 1} onClick={removeRainElement} style={{ margin: '0 8px' }}>\n          Remove rain element\n        </button>\n      </div>\n      <hr />\n      <div>\n        Current raining elements: {rainNumber}\n      </div>\n      {new Array(rainNumber).fill('').map((el, index) => (\n        <Rain key={index} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}